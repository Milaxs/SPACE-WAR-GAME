import pygame
pygame.font.init()
pygame.mixer.init()

#Create the screen
#1
WIDTH, HEIGHT = 900, 500
WIN = pygame.display.set_mode((WIDTH,HEIGHT))
#Edit the name of the Window
#2
pygame.display.set_caption("GALAXY WARS")

WHITE = (255, 255, 255)
VEL = 5
FPS = 60
BORDER = pygame.Rect(WIDTH//2 -5,0,10,HEIGHT)
HEALTH_FONT = pygame.font.SysFont('arial', 40)
WINNER_FONT = pygame.font.SysFont('arial', 100)
BULLET_VEL = 7
MAX_BULLET = 8
SPACESHIP_WIDTH, SPACESHIP_HEIGHT = 55, 40

#30 
BULLET_HIT_SOUND =  pygame.mixer.Sound(r'C:\Users\OSAG 16\Desktop\HTML\python\Assets_Grenade+1.mp3')
BULLET_FIRE_SOUND = pygame.mixer.Sound(r'C:\Users\OSAG 16\Desktop\HTML\python\Assets_Gun+silencer.mp3')

#creating a custom event
YELLOW_HIT =pygame.USEREVENT + 1
RED_HIT = pygame.USEREVENT + 2

#importing the images 
#11
YELLOW_SPACESHIP_IMAGE = pygame.image.load(r"C:\Users\OSAG 16\Desktop\HTML\python\spaceship_yellow.png")
#To crop and rotate the image
YELLOW_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(YELLOW_SPACESHIP_IMAGE, (SPACESHIP_WIDTH, SPACESHIP_HEIGHT)), 90)
RED_SPACESHIP_IMAGE =  pygame.image.load(r"C:\Users\OSAG 16\Desktop\HTML\python\spaceship_red.png")
RED_SPACESHIP =  pygame.transform.rotate(pygame.transform.scale(RED_SPACESHIP_IMAGE, (SPACESHIP_WIDTH, SPACESHIP_HEIGHT)), 270)
#7
SPACE = pygame.transform.scale((pygame.image.load(r"C:\Users\OSAG 16\Desktop\HTML\python\space background.png")),(WIDTH, HEIGHT))
#8
def draw_window(red, yellow, red_bullets, yellow_bullets, red_health, yellow_health):
    #drawing the background
    #10
     WIN.blit(SPACE, (0,0))
     pygame.draw.rect(WIN, (0,0,0), BORDER)
    #drawing the health text 
    #25
     red_health_text = HEALTH_FONT.render(f"Health: {red_health}", 1, WHITE)
     yellow_health_text = HEALTH_FONT.render(f"Health: {yellow_health}", 1, WHITE)

     WIN.blit(red_health_text,(WIDTH-red_health_text.get_width()- 10,10))
     WIN.blit(yellow_health_text,(10,10))
    #drawing the ships
    #13
     WIN.blit(YELLOW_SPACESHIP, (yellow.x, yellow.y))
     WIN.blit(RED_SPACESHIP, (red.x, red.y))
    #drawing bullets
    #23
     for bullet in red_bullets:
         pygame.draw.rect(WIN, (255,0,0), bullet)
     for bullet in yellow_bullets:
         pygame.draw.rect(WIN, (255,255,0), bullet)
     #This is used to update the screen automatically when something is added to the screen    
     pygame.display.update()
#28
def draw_winner(text):
    draw_text=WINNER_FONT.render(text, 1, (255, 255, 255))
    WIN.blit(draw_text, (WIDTH/2 -draw_text.get_width()/2, HEIGHT/2 - draw_text.get_height()/2))
    pygame.display.update()
    pygame.time.delay(5000)

#15    
def yellow_movement(keys_pressed,yellow):
        #assigning the contols and setting the boundaries
        if keys_pressed[pygame.K_a] and yellow.x - VEL > 0:#LEFT
             yellow.x -= VEL
        if keys_pressed[pygame.K_d] and yellow.x +VEL+yellow.width < BORDER.x :#RIGHT
             yellow.x += VEL
        if keys_pressed[pygame.K_w] and yellow.y - VEL > 0:#UP
             yellow.y -= VEL
        if keys_pressed[pygame.K_s] and yellow.y + VEL + yellow.height < HEIGHT- 10:#DOWN
             yellow.y += VEL
#16      
def red_movement(keys_pressed,red):
        #assigning the contols and setting the boundaries
        if keys_pressed[pygame.K_LEFT] and red.x - VEL > BORDER.x  + BORDER.width:#LEFT
             red.x -= VEL
        if keys_pressed[pygame.K_RIGHT] and red.x + VEL + red.width - 20 < WIDTH :#RIGHT
             red.x += VEL
        if keys_pressed[pygame.K_UP] and red.y - VEL > 0:#UP
             red.y -= VEL
        if keys_pressed[pygame.K_DOWN] and red.y + VEL + red.height < HEIGHT- 10:#DOWN
             red.y += VEL
#21             
def handle_bullets(yellow_bullets,red_bullets,yellow, red):
    for bullet in yellow_bullets:
        bullet.x += BULLET_VEL
        #check if the bullet collided with aything
        if red.colliderect(bullet):
            #used to activate the userevent
            pygame.event.post(pygame.event.Event(RED_HIT))
            yellow_bullets.remove(bullet)
        elif bullet.x > WIDTH:
             yellow_bullets.remove(bullet)
             
    for bullet in red_bullets:
        bullet.x -= BULLET_VEL
        if yellow.colliderect(bullet):
            pygame.event.post(pygame.event.Event(YELLOW_HIT))
            red_bullets.remove(bullet)
        elif bullet.x < 0:
             red_bullets.remove(bullet) 


#3       
def main():
    #Represents the red and yellow ship
    #12
    red = pygame.Rect(700,300,SPACESHIP_WIDTH, SPACESHIP_HEIGHT)
    yellow = pygame.Rect(100,300,SPACESHIP_WIDTH, SPACESHIP_HEIGHT)
    #creating a list for all the bullets
    #19
    red_bullets =  []
    yellow_bullets = []
    
    #24
    red_health=10
    yellow_health=10

    #18
    clock = pygame.time.Clock()
    run = True
    #4
    while run:
        #controls the speed of the while loop
        clock.tick(FPS)
        #checking for different events in the game
        #5
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()

            #checking if i pressed a keydown
            #20
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LCTRL and len(yellow_bullets) < MAX_BULLET:
                    bullet =pygame.Rect(yellow.x + yellow.width, yellow.y + yellow.height//2 - 2, 10, 5)
                    yellow_bullets.append(bullet)
                    BULLET_FIRE_SOUND.play()

                if event.key == pygame.K_RCTRL and len(red_bullets) < MAX_BULLET:
                    bullet =pygame.Rect(red.x , red.y + red.height//2 - 2, 10, 5)
                    red_bullets.append(bullet)
                    BULLET_FIRE_SOUND.play()
            #26
            if event.type == RED_HIT:
               red_health -= 1
               BULLET_HIT_SOUND.play()
            if event.type == YELLOW_HIT:
               yellow_health -= 1
               BULLET_HIT_SOUND.play()
        #27
        winner_text = ""
        if red_health <= 0:
           winner_text = "Yellow wins!"
        if yellow_health <= 0:
           winner_text = "Red wins!"
        if winner_text != "":
            #29
           draw_winner(winner_text)
           break

        #This tells us what keys are being pressed down   
        #14       
        keys_pressed = pygame.key.get_pressed()
        #17
        yellow_movement(keys_pressed,yellow)
        red_movement(keys_pressed,red)    
        #22
        handle_bullets(yellow_bullets,red_bullets,yellow, red)
        #9
        draw_window(red, yellow,red_bullets, yellow_bullets, red_health, yellow_health )

    main()

main() 

#it makes sure that we are only going to run this  
#6
if __name__ == "__main__":
    main()

